#!/usr/bin/env node

/**
 * Script de diagn√≥stico para verificar que todo est√° listo para desplegar en Vercel
 * Uso: node scripts/verify-deployment.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const root = path.join(__dirname, '..');

console.log('\nüîç Verificando configuraci√≥n de despliegue...\n');

let allGood = true;

// ‚úÖ Verificar Git status
try {
  console.log('üì¶ Git Status:');
  const gitStatus = execSync('git status --porcelain', { cwd: root }).toString().trim();
  if (gitStatus.length === 0) {
    console.log('  ‚úÖ Working tree clean');
  } else {
    console.log('  ‚ùå Cambios no commiteados:');
    console.log(gitStatus);
    allGood = false;
  }
} catch (e) {
  console.log('  ‚ö†Ô∏è No se pudo verificar git');
}

// ‚úÖ Verificar vercel.json
console.log('\nüìã vercel.json:');
const vercelPath = path.join(root, 'vercel.json');
if (fs.existsSync(vercelPath)) {
  try {
    const vercelJson = JSON.parse(fs.readFileSync(vercelPath, 'utf8'));
    if (vercelJson.buildCommand && vercelJson.outputDirectory) {
      console.log('  ‚úÖ Configurado correctamente');
      console.log(`     - Build: ${vercelJson.buildCommand}`);
      console.log(`     - Output: ${vercelJson.outputDirectory}`);
    } else {
      console.log('  ‚ùå Falta buildCommand o outputDirectory');
      allGood = false;
    }
  } catch (e) {
    console.log('  ‚ùå JSON inv√°lido:', e.message);
    allGood = false;
  }
} else {
  console.log('  ‚ùå No existe');
  allGood = false;
}

// ‚úÖ Verificar package.json scripts
console.log('\nüìú package.json scripts:');
try {
  const pkg = JSON.parse(fs.readFileSync(path.join(root, 'package.json'), 'utf8'));
  if (pkg.scripts.build) {
    console.log(`  ‚úÖ Build script: "${pkg.scripts.build}"`);
  } else {
    console.log('  ‚ùå No hay script de build');
    allGood = false;
  }
} catch (e) {
  console.log('  ‚ùå Error leyendo package.json');
  allGood = false;
}

// ‚úÖ Verificar que dist no est√© commiteado
console.log('\nüìÅ Archivos ignorados:');
const distCommitted = execSync('git ls-files | grep "^dist/"', { 
  cwd: root,
  stdio: ['pipe', 'pipe', 'ignore']
}).toString().trim().length > 0;

if (!distCommitted) {
  console.log('  ‚úÖ dist/ no est√° commiteado (correcto)');
} else {
  console.log('  ‚ö†Ô∏è dist/ est√° en git (considera agregarlo a .gitignore)');
}

// ‚úÖ Hacer un build de prueba
console.log('\nüî® Test de build:');
try {
  execSync('npm run build', { cwd: root, stdio: 'pipe' });
  console.log('  ‚úÖ Build exitoso');
} catch (e) {
  console.log('  ‚ùå Build fall√≥');
  allGood = false;
}

// üìä Resumen
console.log('\n' + '='.repeat(50));
if (allGood) {
  console.log('‚úÖ TODO EST√Å LISTO PARA DESPLEGAR\n');
  console.log('Pr√≥ximo paso: git push origin main');
  console.log('Vercel se actualizar√° autom√°ticamente\n');
  process.exit(0);
} else {
  console.log('‚ùå HAY PROBLEMAS QUE RESOLVER\n');
  console.log('Revisa los errores arriba\n');
  process.exit(1);
}
